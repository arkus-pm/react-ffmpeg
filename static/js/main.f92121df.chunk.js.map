{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","videoSrc","setVideoSrc","selectedVideo","setSelectedVideo","message","setMessage","ffmpeg","createFFmpeg","log","doTranscode","a","load","setProgress","ratio","Math","floor","name","fetchFile","FS","run","data","URL","createObjectURL","Blob","buffer","type","className","src","controls","onClick","onChange","e","target","files","console","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"2RAoCeA,MAhCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,OAIiBJ,mBAAS,4BAJ1B,mBAINK,EAJM,KAIGC,EAJH,KAKPC,EAASC,uBAAa,CAC1BC,KAAK,IAEDC,EAAW,uCAAG,4BAAAC,EAAA,6DAClBL,EAAW,0BADO,SAEZC,EAAOK,OAFK,cAGlBL,EAAOM,aAAY,YAAgB,IAAbC,EAAY,EAAZA,MACxBR,EAAWS,KAAKC,MAAY,IAANF,GAAW,QAE/BR,EAAW,qBANO,KAOlBC,EAPkB,KAOKJ,EAAcc,KAPnB,SAO+BC,oBAAUf,GAPzC,+BAOXgB,GAPW,UAOR,YAPQ,qBAQZZ,EAAOa,IAAI,KAAMjB,EAAcc,KAAM,OAAQ,UAAW,YAR5C,eASlBX,EAAW,wBATO,UAUCC,EAAOY,GAAG,WAAY,YAVvB,QAUZE,EAVY,OAWlBnB,EAAYoB,IAAIC,gBAAgB,IAAIC,KAAK,CAACH,EAAKI,QAAS,CAAEC,KAAM,gBAX9C,4CAAH,qDAajB,OACE,yBAAKC,UAAU,OACb,4BACA,2BAAOC,IAAK3B,EAAU4B,UAAQ,IAAS,6BACvC,4BAAQC,QAASpB,GAAjB,SACA,2BAAOqB,SAvBe,SAACC,GAAO5B,EAAiB4B,EAAEC,OAAOC,MAAM,IAAKC,QAAQ1B,IAAIuB,EAAEC,OAAOC,MAAM,KAuB1DR,KAAK,SACzC,2BAAIrB,KCnBU+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMhD,c","file":"static/js/main.f92121df.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport './App.css';\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState('');\n  const [selectedVideo, setSelectedVideo] = useState({});\n  const handelValueChange = (e) => {setSelectedVideo(e.target.files[0]); console.log(e.target.files[0]);};\n  const [message, setMessage] = useState('Click Start to transcode');\n  const ffmpeg = createFFmpeg({\n    log: true,\n  });\n  const doTranscode = async () => {\n    setMessage('Loading ffmpeg-core.js');\n    await ffmpeg.load();\n    ffmpeg.setProgress(({ ratio }) => {\n  setMessage(Math.floor(ratio*100)+\"%\");\n});\n    setMessage('Start transcoding');\n    ffmpeg.FS('writeFile', selectedVideo.name, await fetchFile(selectedVideo));\n    await ffmpeg.run('-i', selectedVideo.name, '-c:v', 'libx264', 'test.mp4');\n    setMessage('Complete transcoding');\n    const data = await ffmpeg.FS('readFile', 'test.mp4');\n    setVideoSrc(URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' })));\n  };\n  return (\n    <div className=\"App\">\n      <p/>\n      <video src={videoSrc} controls></video><br/>\n      <button onClick={doTranscode}>Start</button>\n      <input onChange={handelValueChange} type=\"file\" />\n      <p>{message}</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}