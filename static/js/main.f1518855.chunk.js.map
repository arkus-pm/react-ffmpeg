{"version":3,"sources":["waveform.js","DataTable.js","App.js","serviceWorker.js","index.js"],"names":["Waveform","audio","containerRef","useRef","waveSurferRef","isPlaying","useState","toggleIsPlaying","useEffect","waveSurfer","WaveSurfer","create","container","current","fillParent","height","width","barWidth","barHeight","cursorWidth","loadBlob","on","seekTo","destroy","Grid","style","display","IconButton","onClick","playPause","color","ref","columns","field","headerName","flex","sortable","renderCell","params","row","file","DataTable","rows","getRowSpacing","React","top","bottom","Box","sx","DataGrid","autoHeight","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","App","files","setFiles","message","loadMetadata","createFFmpeg","log","logger","type","console","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","Audio","result","preload","onloadedmetadata","data","duration","onerror","error","className","direction","alignItems","spacing","item","Alert","severity","Input","onChange","e","Array","from","target","filter","name","Blob","map","id","webkitRelativePath","fileName","relativePath","metadata","inputProps","webkitdirectory","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","document","getElementById","createRoot","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f1518855.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport {\n    IconButton,\n    Grid,\n} from '@mui/material';\nimport PauseCircleOutlineRoundedIcon from '@mui/icons-material/PauseCircleOutlineRounded';\nimport PlayCircleRoundedIcon from '@mui/icons-material/PlayCircleRounded';\n\n\nconst Waveform = ({ audio }) => {\n  const containerRef = useRef();\n  const waveSurferRef = useRef({\n    isPlaying: () => false,\n  });\n  const [isPlaying, toggleIsPlaying] = useState(false);\n\n  useEffect(() => {\n    const waveSurfer = WaveSurfer.create({\n      container: containerRef.current,\n      fillParent: false,\n      height: 50,\n      width: 200,\n      barWidth: 2,\n      barHeight: 2,\n      cursorWidth: 1,\n    });\n    waveSurfer.loadBlob(audio);\n    waveSurfer.on('ready', () => {\n      waveSurferRef.current = waveSurfer;\n      waveSurfer.seekTo(1);\n    });\n\n    return () => {\n      waveSurfer.destroy();\n    };\n  }, [audio]);\n\n  return (\n    <Grid container>\n<div style={{display: \"flex\"}}>\n    <IconButton\n        onClick={() => {\n          waveSurferRef.current.playPause();\n          toggleIsPlaying(waveSurferRef.current.isPlaying());\n          waveSurferRef.current.on(\"finish\", ()=> {toggleIsPlaying(waveSurferRef.current.isPlaying());});\n        }}\n        color=\"primary\"\n      >\n        {isPlaying ? <PauseCircleOutlineRoundedIcon/> : <PlayCircleRoundedIcon/>}\n      </IconButton>\n    <div style={{width: \"100%\"}} ref={containerRef}></div>\n    </div>\n    </Grid>\n  );\n};\n\n\nexport default Waveform;\n","import * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport usePromise from 'react-promise';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Waveform from './waveform';\n\nconst PreviewAudioDuration = ({data}) => {\n  const {value, loading} = usePromise(data);\n  if (loading) return <CircularProgress />;\n  return <audio controls src={value.data}></audio>;\n}\n\nconst columns = [\n\t{\n    field: 'id',\n    headerName: 'ID',\n    flex: 1,\n  },\n  { \n  \tfield: 'fileName', \n  \theaderName: 'FileName',\n  \tsortable: true,\n  \tflex: 1,\n  },\n  {\n    field: 'relativePath',\n    headerName: 'Path',\n    sortable: true,\n    flex: 2,\n  },\n  {\n    field: 'type',\n    headerName: 'Type',\n    flex: 1,\n  },\n  {\n    field: 'waveform',\n    headerName: 'Waveform',\n    flex: 2,\n    renderCell: (params) => (\n    \t<Waveform audio={params.row.file}/>\n    \t)\n  }\n];\n\n\nexport default function DataTable({rows}) {\n\tconst getRowSpacing = React.useCallback((params) => {\n    return {\n      top: 0,\n      bottom: 10,\n    };\n  }, []);\n\n  return (\n  \t<Box sx={{ width: '100%' }}>\n  \t<DataGrid\n  \t\tautoHeight\n        rows={rows}\n        columns={columns}\n        pageSize={100}\n        rowsPerPageOptions={[5]}\n        checkboxSelection\n        disableSelectionOnClick\n\t\tgetRowSpacing={getRowSpacing}\n      />\n      </Box>\n  \t)\n}\n","import React, {\n    useState\n} from 'react';\nimport {\n    createFFmpeg,\n    fetchFile\n} from '@ffmpeg/ffmpeg';\nimport './App.css';\nimport {\n    Input,\n    Button,\n    CardMedia,\n    Grid,\n    LinearProgress,\n    Alert\n} from '@mui/material';\nimport DataTable from './DataTable';\n\nfunction App() {\n    const [videoSrc, setVideoSrc] = useState('');\n    const [selectedVideo, setSelectedVideo] = useState();\n    const [progress, setProgress] = useState(0);\n    const [files, setFiles] = useState([]);\n    const handleFileInputChange = (e) => {\n        setFiles(Array.from(e.target.files).filter(e=> {if (e.name[0]!==\".\" && e instanceof Blob) return e}).map((e) => {\n           return {\n                file: e,\n                id: e.webkitRelativePath,\n                fileName: e.name,\n                relativePath: e.webkitRelativePath,\n                type: e.type,\n                metadata: loadMetadata(e),\n            }\n        }));\n        \n    };\n    const [message, setMessage] = useState('Select file & click start');\n    const ffmpeg = createFFmpeg({\n        log: false,\n        logger: ({\n            type,\n            message\n        }) => {\n            if (message !== \"use ffmpeg.wasm v0.10.0\") console.log(type, message)\n        }\n    });\n    const doTranscode = async() => {\n        setMessage('Loading ffmpeg-core.js');\n        await ffmpeg.load();\n        ffmpeg.setProgress(({\n            ratio\n        }) => {\n            setProgress(ratio*100);\n        });\n        setMessage('Start transcoding');\n        ffmpeg.FS('writeFile', selectedVideo.name, await fetchFile(selectedVideo));\n        await ffmpeg.run('-i', selectedVideo.name, '-c:v', 'libx264', 'test.mp4');\n        setMessage('Complete transcoding');\n        const data = await ffmpeg.FS('readFile', 'test.mp4');\n        setVideoSrc(URL.createObjectURL(new Blob([data.buffer], {\n            type: 'video/mp4'\n        })));\n    };\n    const loadMetadata = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      let audio = new Audio(reader.result);\n      audio.preload=\"metadata\";\n      audio.onloadedmetadata = () => {resolve({data: reader.result, duration: audio.duration})};\n  }\n    reader.onerror = error => reject(error);\n});\n  return (\n<div className=\"App\">\n  <Grid\n    container\n    direction=\"column\"\n    alignItems=\"center\"\n    spacing={2}\n    >\n    <Grid item>\n      <Alert severity=\"info\">{message}</Alert>\n    </Grid>\n    <Grid item>\n      </Grid>\n      <Grid item>\n        <Input\n        onChange={handleFileInputChange}\n        inputProps={{webkitdirectory:'true'}}\n        type={\"file\"}\n        />\n      </Grid>\n      <Grid item sx={{width: '100%'}}>\n      <DataTable rows={files}/>\n    </Grid>\n  </Grid>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createRoot } from 'react-dom/client';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}